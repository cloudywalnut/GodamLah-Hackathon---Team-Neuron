import os
import requests
import tensorflow as tf
from tensorflow.keras.layers import Dense
from tensorflow.keras.models import Sequential
import numpy as np

# Access the environment variable
apiKey = os.getenv('EMAIL_VALIDATION_API_KEY')
apiEndPoint = os.getenv('EMAIL_VALIDATION_ENDPOINT')

# Weights to be Hardcoded from the PreTrained Model to Improve API Performance:
# Weights not set for now due to time constraints.
weights_1 = [[-0.4317913055419922,
  1.558848261833191,
  1.6307096481323242,
  -0.4588130712509155,
  -0.6770279407501221,
  -0.49288493394851685,
  -0.9013321995735168,
  -0.7291839718818665,
  1.0937539339065552,
  -0.9395284652709961],
 [-0.43699759244918823,
  -0.8485828042030334,
  -0.17717291414737701,
  -0.13092808425426483,
  -0.047993991523981094,
  -0.5298195481300354,
  -0.3664519190788269,
  -0.108456552028656,
  0.5137639045715332,
  -0.9255565404891968],
 [-0.7974329590797424,
  0.5126240253448486,
  0.3813759386539459,
  0.802764356136322,
  0.17796579003334045,
  -0.33641648292541504,
  0.7715369462966919,
  -0.29465073347091675,
  -0.27184590697288513,
  -0.19143438339233398],
 [-0.7239819765090942,
  0.09394172579050064,
  -0.16844601929187775,
  -0.5574098229408264,
  -0.5822005271911621,
  -0.2246360182762146,
  -0.2375468760728836,
  -0.018645640462636948,
  0.49905821681022644,
  0.5313444137573242],
 [0.9199720025062561,
  0.4475826025009155,
  0.33049476146698,
  0.6792114973068237,
  -0.1316971331834793,
  -0.14270594716072083,
  -0.2123241424560547,
  0.1850283294916153,
  0.7765949964523315,
  1.1226567029953003]]
bias_1 = [0.573237419128418,
 -0.14753255248069763,
 -0.5992060899734497,
 0.5754958987236023,
 -0.084710992872715,
 0.0,
 0.3368159234523773,
 -0.11807376146316528,
 -0.37956899404525757,
 0.7194787263870239]

weights_2 = [[-1.7629483938217163,
  1.8714923858642578,
  1.9501529932022095,
  1.2089872360229492,
  1.5260248184204102],
 [2.7843081951141357,
  -0.5671268701553345,
  0.40891581773757935,
  -2.397099018096924,
  -0.41959017515182495],
 [3.381917953491211,
  -0.27560946345329285,
  -0.7075462937355042,
  -1.952600121498108,
  -0.765319287776947],
 [0.45711466670036316,
  0.8583812117576599,
  0.9225931167602539,
  -0.48056161403656006,
  0.8378996849060059],
 [0.23551207780838013,
  -0.4039437472820282,
  0.259537011384964,
  -0.1304733157157898,
  -0.11966220289468765],
 [-0.5470767617225647,
  -0.5516581535339355,
  0.5389558672904968,
  -0.6250751614570618,
  -0.25596728920936584],
 [-1.0549317598342896,
  1.6372038125991821,
  1.5209453105926514,
  -0.44652777910232544,
  1.7021887302398682],
 [0.38834893703460693,
  0.6622642874717712,
  -0.6260877251625061,
  -0.016751402989029884,
  -0.053697168827056885],
 [0.943848192691803,
  -0.5363308787345886,
  -0.6877257227897644,
  0.6382262110710144,
  -0.2970227301120758],
 [-0.7108575105667114,
  2.139594554901123,
  1.715922236442566,
  0.9656935334205627,
  1.4406791925430298]]
bias_2 = [-0.34605804085731506,
 0.12773044407367706,
 0.22631676495075226,
 0.6262319684028625,
 0.21893958747386932]


weights_3 = [[1.691257357597351],
 [-1.8124703168869019],
 [-2.662221670150757],
 [-2.906731128692627],
 [-2.0167908668518066]]
bias_3 =[-0.11870855838060379]

new_model = Sequential([
    Dense(10, activation= 'relu', name = 'layer1', input_shape=(5,)),
    Dense(5, activation= 'relu', name = 'layer2'),
    Dense(1, activation='sigmoid', name = 'layer3')
])

new_model.get_layer('layer1').set_weights([np.array(weights_1),np.array(bias_1)])
new_model.get_layer('layer2').set_weights([np.array(weights_2),np.array(bias_2)])
new_model.get_layer('layer3').set_weights([np.array(weights_3),np.array(bias_3)])


def validate_email(email):
    request = requests.get(f"{apiEndPoint}?apikey={apiKey}&email={email}")
    response = request.json()

    # gets back the key fields from the response
    score = float(response['score'])
    state = 1 if response['state'] == 'deliverable' else 0
    smtp_check = 1 if response['smtp_check'] == 'true' else 0
    mx_found  = 1 if response['mx_found'] == 'true' else 0
    disposale = 1 if response['disposable'] == 'true' else 0
    
    # passes it onto the ML model
    item = np.array([[score, state, smtp_check, mx_found, disposale]])    
    confidence_score = new_model.predict(item)
    return confidence_score.tolist()     # returns the confidence score.